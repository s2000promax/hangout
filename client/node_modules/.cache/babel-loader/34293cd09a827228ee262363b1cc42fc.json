{"ast":null,"code":"import { createAction, createSlice } from \"@reduxjs/toolkit\";\nimport authService from \"../services/auth.service\";\nimport localStorageService from \"../services/localStorage.service\";\nimport userService from \"../services/user.service\";\nimport { generetaAuthError } from \"../utils/generateAuthError\";\nimport history from \"../utils/history\";\nconst initialState = localStorageService.getAccessToken() ? {\n  entities: null,\n  isLoading: true,\n  error: null,\n  auth: {\n    userId: localStorageService.getUserId()\n  },\n  isLoggedIn: true,\n  dataLoaded: false\n} : {\n  entities: null,\n  isLoading: false,\n  error: null,\n  auth: null,\n  isLoggedIn: false,\n  dataLoaded: false\n};\nconst usersSlice = createSlice({\n  name: \"users\",\n  initialState,\n  reducers: {\n    usersRequested: state => {\n      state.isLoading = true;\n    },\n    usersReceved: (state, action) => {\n      state.entities = action.payload;\n      state.dataLoaded = true;\n      state.isLoading = false;\n    },\n    usersRequestFiled: (state, action) => {\n      state.error = action.payload;\n      state.isLoading = false;\n    },\n    authRequestSuccess: (state, action) => {\n      state.auth = action.payload;\n      state.isLoggedIn = true;\n    },\n    authRequestFailed: (state, action) => {\n      state.error = action.payload;\n    },\n    userCreated: (state, action) => {\n      state.entities.push(action.payload);\n    },\n    userLoggedOut: state => {\n      state.entities = null;\n      state.isLoggedIn = false;\n      state.auth = null;\n      state.dataLoaded = false;\n    },\n    userUpdateSuccessed: (state, action) => {\n      state.entities[state.entities.findIndex(u => u._id === action.payload._id)] = action.payload;\n    },\n    authRequested: state => {\n      state.error = null;\n    }\n  }\n});\nconst {\n  reducer: usersReducer,\n  actions\n} = usersSlice;\nconst {\n  usersRequested,\n  usersReceved,\n  usersRequestFiled,\n  authRequestFailed,\n  authRequestSuccess,\n  userLoggedOut,\n  userUpdateSuccessed\n} = actions;\nconst authRequested = createAction(\"users/authRequested\");\nconst userUpdateFailed = createAction(\"users/userUpdateFailed\");\nconst userUpdateRequested = createAction(\"users/userUpdateRequested\");\nexport const login = ({\n  payload,\n  redirect\n}) => async dispatch => {\n  const {\n    email,\n    password\n  } = payload;\n  dispatch(authRequested());\n\n  try {\n    const data = await authService.login({\n      email,\n      password\n    });\n    localStorageService.setTokens(data);\n    dispatch(authRequestSuccess({\n      userId: data.userId\n    }));\n    history.push(redirect);\n  } catch (error) {\n    const {\n      code,\n      message\n    } = error.response.data.error;\n\n    if (code === 400) {\n      const errorMessage = generetaAuthError(message);\n      dispatch(authRequestFailed(errorMessage));\n    } else {\n      dispatch(authRequestFailed(error.message));\n    }\n  }\n};\nexport const signUp = payload => async dispatch => {\n  dispatch(authRequested());\n\n  try {\n    const data = await authService.register(payload);\n    localStorageService.setTokens(data);\n    dispatch(authRequestSuccess({\n      userId: data.userId\n    }));\n    history.push(\"/users\");\n  } catch (error) {\n    dispatch(authRequestFailed(error.message));\n  }\n};\nexport const logOut = () => dispatch => {\n  localStorageService.removeAuthData();\n  dispatch(userLoggedOut());\n  history.push(\"/\");\n};\nexport const loadUsersList = () => async dispatch => {\n  dispatch(usersRequested());\n\n  try {\n    const {\n      content\n    } = await userService.get();\n    dispatch(usersReceved(content));\n  } catch (error) {\n    dispatch(usersRequestFiled(error.message));\n  }\n};\nexport const updateUser = payload => async dispatch => {\n  dispatch(userUpdateRequested());\n\n  try {\n    const {\n      content\n    } = await userService.update(payload);\n    dispatch(userUpdateSuccessed(content));\n    history.push(`/users/${content._id}`);\n  } catch (error) {\n    dispatch(userUpdateFailed(error.message));\n  }\n};\nexport const getUsersList = () => state => state.users.entities;\nexport const getCurrentUserData = () => state => {\n  return state.users.entities ? state.users.entities.find(u => u._id === state.users.auth.userId) : null;\n};\nexport const getUserById = userId => state => {\n  if (state.users.entities) {\n    return state.users.entities.find(u => u._id === userId);\n  }\n};\nexport const getIsLoggedIn = () => state => state.users.isLoggedIn;\nexport const getDataStatus = () => state => state.users.dataLoaded;\nexport const getUsersLoadingStatus = () => state => state.users.isLoading;\nexport const getCurrentUserId = () => state => state.users.auth.userId;\nexport const getAuthErrors = () => state => state.users.error;\nexport default usersReducer;","map":{"version":3,"sources":["/home/designer/GitHub/hangout/client/src/app/store/users.js"],"names":["createAction","createSlice","authService","localStorageService","userService","generetaAuthError","history","initialState","getAccessToken","entities","isLoading","error","auth","userId","getUserId","isLoggedIn","dataLoaded","usersSlice","name","reducers","usersRequested","state","usersReceved","action","payload","usersRequestFiled","authRequestSuccess","authRequestFailed","userCreated","push","userLoggedOut","userUpdateSuccessed","findIndex","u","_id","authRequested","reducer","usersReducer","actions","userUpdateFailed","userUpdateRequested","login","redirect","dispatch","email","password","data","setTokens","code","message","response","errorMessage","signUp","register","logOut","removeAuthData","loadUsersList","content","get","updateUser","update","getUsersList","users","getCurrentUserData","find","getUserById","getIsLoggedIn","getDataStatus","getUsersLoadingStatus","getCurrentUserId","getAuthErrors"],"mappings":"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","sourcesContent":["import { createAction, createSlice } from \"@reduxjs/toolkit\";\nimport authService from \"../services/auth.service\";\nimport localStorageService from \"../services/localStorage.service\";\nimport userService from \"../services/user.service\";\nimport { generetaAuthError } from \"../utils/generateAuthError\";\nimport history from \"../utils/history\";\nconst initialState = localStorageService.getAccessToken()\n    ? {\n          entities: null,\n          isLoading: true,\n          error: null,\n          auth: { userId: localStorageService.getUserId() },\n          isLoggedIn: true,\n          dataLoaded: false\n      }\n    : {\n          entities: null,\n          isLoading: false,\n          error: null,\n          auth: null,\n          isLoggedIn: false,\n          dataLoaded: false\n      };\n\nconst usersSlice = createSlice({\n    name: \"users\",\n    initialState,\n    reducers: {\n        usersRequested: (state) => {\n            state.isLoading = true;\n        },\n        usersReceved: (state, action) => {\n            state.entities = action.payload;\n            state.dataLoaded = true;\n            state.isLoading = false;\n        },\n        usersRequestFiled: (state, action) => {\n            state.error = action.payload;\n            state.isLoading = false;\n        },\n        authRequestSuccess: (state, action) => {\n            state.auth = action.payload;\n            state.isLoggedIn = true;\n        },\n        authRequestFailed: (state, action) => {\n            state.error = action.payload;\n        },\n        userCreated: (state, action) => {\n            state.entities.push(action.payload);\n        },\n        userLoggedOut: (state) => {\n            state.entities = null;\n            state.isLoggedIn = false;\n            state.auth = null;\n            state.dataLoaded = false;\n        },\n        userUpdateSuccessed: (state, action) => {\n            state.entities[\n                state.entities.findIndex((u) => u._id === action.payload._id)\n            ] = action.payload;\n        },\n        authRequested: (state) => {\n            state.error = null;\n        }\n    }\n});\n\nconst { reducer: usersReducer, actions } = usersSlice;\nconst {\n    usersRequested,\n    usersReceved,\n    usersRequestFiled,\n    authRequestFailed,\n    authRequestSuccess,\n    userLoggedOut,\n    userUpdateSuccessed\n} = actions;\n\nconst authRequested = createAction(\"users/authRequested\");\nconst userUpdateFailed = createAction(\"users/userUpdateFailed\");\nconst userUpdateRequested = createAction(\"users/userUpdateRequested\");\n\nexport const login =\n    ({ payload, redirect }) =>\n    async (dispatch) => {\n        const { email, password } = payload;\n        dispatch(authRequested());\n        try {\n            const data = await authService.login({ email, password });\n            localStorageService.setTokens(data);\n            dispatch(authRequestSuccess({ userId: data.userId }));\n            history.push(redirect);\n        } catch (error) {\n            const { code, message } = error.response.data.error;\n            if (code === 400) {\n                const errorMessage = generetaAuthError(message);\n                dispatch(authRequestFailed(errorMessage));\n            } else {\n                dispatch(authRequestFailed(error.message));\n            }\n        }\n    };\n\nexport const signUp = (payload) =>\n    async (dispatch) => {\n        dispatch(authRequested());\n        try {\n            const data = await authService.register(payload);\n            localStorageService.setTokens(data);\n            dispatch(authRequestSuccess({ userId: data.userId }));\n            history.push(\"/users\");\n        } catch (error) {\n            dispatch(authRequestFailed(error.message));\n        }\n    };\nexport const logOut = () => (dispatch) => {\n    localStorageService.removeAuthData();\n    dispatch(userLoggedOut());\n    history.push(\"/\");\n};\nexport const loadUsersList = () => async (dispatch) => {\n    dispatch(usersRequested());\n    try {\n        const { content } = await userService.get();\n        dispatch(usersReceved(content));\n    } catch (error) {\n        dispatch(usersRequestFiled(error.message));\n    }\n};\nexport const updateUser = (payload) => async (dispatch) => {\n    dispatch(userUpdateRequested());\n    try {\n        const { content } = await userService.update(payload);\n        dispatch(userUpdateSuccessed(content));\n        history.push(`/users/${content._id}`);\n    } catch (error) {\n        dispatch(userUpdateFailed(error.message));\n    }\n};\n\nexport const getUsersList = () => (state) => state.users.entities;\nexport const getCurrentUserData = () => (state) => {\n    return state.users.entities\n        ? state.users.entities.find((u) => u._id === state.users.auth.userId)\n        : null;\n};\nexport const getUserById = (userId) => (state) => {\n    if (state.users.entities) {\n        return state.users.entities.find((u) => u._id === userId);\n    }\n};\n\nexport const getIsLoggedIn = () => (state) => state.users.isLoggedIn;\nexport const getDataStatus = () => (state) => state.users.dataLoaded;\nexport const getUsersLoadingStatus = () => (state) => state.users.isLoading;\nexport const getCurrentUserId = () => (state) => state.users.auth.userId;\nexport const getAuthErrors = () => (state) => state.users.error;\nexport default usersReducer;\n"]},"metadata":{},"sourceType":"module"}