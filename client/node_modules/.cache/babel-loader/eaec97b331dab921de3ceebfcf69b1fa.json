{"ast":null,"code":"import axios from \"axios\";\nimport { toast } from \"react-toastify\";\nimport configFile from \"../config.json\";\nimport authService from \"./auth.service\";\nimport localStorageService from \"./localStorage.service\";\nconst http = axios.create({\n  baseURL: configFile.apiEndpoint\n});\nhttp.interceptors.request.use(async function (config) {\n  const expiresDate = localStorageService.getTokenExpiresDate();\n  const refreshToken = localStorageService.getRefreshToken();\n  const isExpired = refreshToken && expiresDate < Date.now();\n\n  if (configFile.isFireBase) {\n    const containSlash = /\\/$/gi.test(config.url);\n    config.url = (containSlash ? config.url.slice(0, -1) : config.url) + \".json\";\n\n    if (isExpired) {\n      const data = await authService.refresh();\n      localStorageService.setTokens({\n        refreshToken: data.refresh_token,\n        idToken: data.id_token,\n        expiresIn: data.expires_in,\n        localId: data.user_id\n      });\n    }\n\n    const accessToken = localStorageService.getAccessToken();\n\n    if (accessToken) {\n      config.params = { ...config.params,\n        auth: accessToken\n      };\n    }\n  } else {\n    if (isExpired) {\n      const data = await authService.refresh();\n      localStorageService.setTokens(data);\n    }\n\n    const accessToken = localStorageService.getAccessToken();\n\n    if (accessToken) {\n      config.headers = { ...config.headers,\n        Authorization: `Bearer ${accessToken}`\n      };\n    }\n  }\n\n  return config;\n}, function (error) {\n  return Promise.reject(error);\n});\n\nfunction transormData(data) {\n  return data && !data._id ? Object.keys(data).map(key => ({ ...data[key]\n  })) : data;\n}\n\nhttp.interceptors.response.use(res => {\n  if (configFile.isFireBase) {\n    res.data = {\n      content: transormData(res.data)\n    };\n  }\n\n  res.data = {\n    content: res.data\n  };\n  return res;\n}, function (error) {\n  const expectedErrors = error.response && error.response.status >= 400 && error.response.status < 500;\n\n  if (!expectedErrors) {\n    console.log(error);\n    toast.error(\"Somthing was wrong. Try it later\");\n  }\n\n  return Promise.reject(error);\n});\nconst httpService = {\n  get: http.get,\n  post: http.post,\n  put: http.put,\n  delete: http.delete,\n  patch: http.patch\n};\nexport default httpService;","map":{"version":3,"sources":["/home/designer/GitHub/hangout/client/src/app/services/http.service.js"],"names":["axios","toast","configFile","authService","localStorageService","http","create","baseURL","apiEndpoint","interceptors","request","use","config","expiresDate","getTokenExpiresDate","refreshToken","getRefreshToken","isExpired","Date","now","isFireBase","containSlash","test","url","slice","data","refresh","setTokens","refresh_token","idToken","id_token","expiresIn","expires_in","localId","user_id","accessToken","getAccessToken","params","auth","headers","Authorization","error","Promise","reject","transormData","_id","Object","keys","map","key","response","res","content","expectedErrors","status","console","log","httpService","get","post","put","delete","patch"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport { toast } from \"react-toastify\";\nimport configFile from \"../config.json\";\nimport authService from \"./auth.service\";\n\nimport localStorageService from \"./localStorage.service\";\n\nconst http = axios.create({\n  baseURL: configFile.apiEndpoint\n});\n\nhttp.interceptors.request.use(\n  async function (config) {\n    const expiresDate = localStorageService.getTokenExpiresDate();\n    const refreshToken = localStorageService.getRefreshToken();\n    const isExpired = refreshToken && expiresDate < Date.now();\n\n    if (configFile.isFireBase) {\n      const containSlash = /\\/$/gi.test(config.url);\n      config.url =\n        (containSlash ? config.url.slice(0, -1) : config.url) + \".json\";\n      if (isExpired) {\n        const data = await authService.refresh();\n\n        localStorageService.setTokens({\n          refreshToken: data.refresh_token,\n          idToken: data.id_token,\n          expiresIn: data.expires_in,\n          localId: data.user_id\n        });\n      }\n      const accessToken = localStorageService.getAccessToken();\n      if (accessToken) {\n        config.params = { ...config.params, auth: accessToken };\n      }\n    } else {\n      if (isExpired) {\n        const data = await authService.refresh();\n        localStorageService.setTokens(data);\n      }\n      const accessToken = localStorageService.getAccessToken();\n      if (accessToken) {\n        config.headers = {\n          ...config.headers,\n          Authorization: `Bearer ${accessToken}`\n        };\n      }\n    }\n    return config;\n  },\n  function (error) {\n    return Promise.reject(error);\n  }\n);\n\nfunction transormData(data) {\n  return data && !data._id\n    ? Object.keys(data).map((key) => ({\n      ...data[key]\n    }))\n    : data;\n}\n\nhttp.interceptors.response.use(\n  (res) => {\n    if (configFile.isFireBase) {\n      res.data = { content: transormData(res.data) };\n    }\n    res.data = { content: res.data };\n    return res;\n  },\n  function (error) {\n    const expectedErrors =\n      error.response &&\n      error.response.status >= 400 &&\n      error.response.status < 500;\n\n    if (!expectedErrors) {\n      console.log(error);\n      toast.error(\"Somthing was wrong. Try it later\");\n    }\n    return Promise.reject(error);\n  }\n);\nconst httpService = {\n  get: http.get,\n  post: http.post,\n  put: http.put,\n  delete: http.delete,\n  patch: http.patch\n};\nexport default httpService;\n"]},"metadata":{},"sourceType":"module"}