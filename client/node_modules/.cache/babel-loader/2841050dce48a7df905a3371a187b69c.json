{"ast":null,"code":"import { createAction, createSlice } from \"@reduxjs/toolkit\";\nimport commentService from \"../services/comment.service\";\nconst commentsSlice = createSlice({\n  name: \"comments\",\n  initialState: {\n    entities: null,\n    isLoading: true,\n    error: null\n  },\n  reducers: {\n    commentsRequested: state => {\n      state.isLoading = true;\n    },\n    commentsReceved: (state, action) => {\n      state.entities = action.payload;\n      state.isLoading = false;\n    },\n    commentsRequestFiled: (state, action) => {\n      state.error = action.payload;\n      state.isLoading = false;\n    },\n    commetnCreated: (state, action) => {\n      state.entities.push(action.payload);\n    },\n    commentRemoved: (state, action) => {\n      state.entities = state.entities.filter(c => c._id !== action.payload);\n    }\n  }\n});\nconst {\n  reducer: commentsReducer,\n  actions\n} = commentsSlice;\nconst {\n  commentsRequested,\n  commentsReceved,\n  commentsRequestFiled,\n  commetnCreated,\n  commentRemoved\n} = actions;\nconst addCommentRequested = createAction(\"comments/addCommentRequested\");\nconst removeCommentRequested = createAction(\"comments/removeCommentRequested\");\nexport const loadCommentsList = userId => async dispatch => {\n  dispatch(commentsRequested());\n\n  try {\n    const {\n      content\n    } = await commentService.getComments(userId);\n    dispatch(commentsReceved(content));\n  } catch (error) {\n    dispatch(commentsRequestFiled(error.message));\n  }\n};\nexport const createComment = payload => async (dispatch, getState) => {\n  dispatch(addCommentRequested());\n\n  try {\n    const {\n      content\n    } = await commentService.createComment(payload);\n    dispatch(commetnCreated(content));\n  } catch (error) {\n    dispatch(commentsRequestFiled(error.message));\n  }\n};\nexport const removeComment = commentId => async dispatch => {\n  dispatch(removeCommentRequested());\n\n  try {\n    const {\n      content\n    } = await commentService.removeComment(commentId);\n\n    if (!content) {\n      dispatch(commentRemoved(commentId));\n    }\n  } catch (error) {\n    dispatch(commentsRequestFiled(error.message));\n  }\n};\nexport const getComments = () => state => state.comments.entities;\nexport const getCommentsLoadingStatus = () => state => state.comments.isLoading;\nexport default commentsReducer;","map":{"version":3,"sources":["/home/designer/GitHub/hangout/client/src/app/store/comments.js"],"names":["createAction","createSlice","commentService","commentsSlice","name","initialState","entities","isLoading","error","reducers","commentsRequested","state","commentsReceved","action","payload","commentsRequestFiled","commetnCreated","push","commentRemoved","filter","c","_id","reducer","commentsReducer","actions","addCommentRequested","removeCommentRequested","loadCommentsList","userId","dispatch","content","getComments","message","createComment","getState","removeComment","commentId","comments","getCommentsLoadingStatus"],"mappings":"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","sourcesContent":["import { createAction, createSlice } from \"@reduxjs/toolkit\";\nimport commentService from \"../services/comment.service\";\nconst commentsSlice = createSlice({\n    name: \"comments\",\n    initialState: {\n        entities: null,\n        isLoading: true,\n        error: null\n    },\n    reducers: {\n        commentsRequested: (state) => {\n            state.isLoading = true;\n        },\n        commentsReceved: (state, action) => {\n            state.entities = action.payload;\n            state.isLoading = false;\n        },\n        commentsRequestFiled: (state, action) => {\n            state.error = action.payload;\n            state.isLoading = false;\n        },\n        commetnCreated: (state, action) => {\n            state.entities.push(action.payload);\n        },\n        commentRemoved: (state, action) => {\n            state.entities = state.entities.filter(\n                (c) => c._id !== action.payload\n            );\n        }\n    }\n});\n\nconst { reducer: commentsReducer, actions } = commentsSlice;\nconst {\n    commentsRequested,\n    commentsReceved,\n    commentsRequestFiled,\n    commetnCreated,\n    commentRemoved\n} = actions;\n\nconst addCommentRequested = createAction(\"comments/addCommentRequested\");\nconst removeCommentRequested = createAction(\"comments/removeCommentRequested\");\n\nexport const loadCommentsList = (userId) => async (dispatch) => {\n    dispatch(commentsRequested());\n    try {\n        const { content } = await commentService.getComments(userId);\n        dispatch(commentsReceved(content));\n    } catch (error) {\n        dispatch(commentsRequestFiled(error.message));\n    }\n};\nexport const createComment = (payload) => async (dispatch, getState) => {\n    dispatch(addCommentRequested());\n    try {\n        const { content } = await commentService.createComment(payload);\n        dispatch(commetnCreated(content));\n    } catch (error) {\n        dispatch(commentsRequestFiled(error.message));\n    }\n};\nexport const removeComment = (commentId) => async (dispatch) => {\n    dispatch(removeCommentRequested());\n    try {\n        const { content } = await commentService.removeComment(commentId);\n        if (!content) {\n            dispatch(commentRemoved(commentId));\n        }\n    } catch (error) {\n        dispatch(commentsRequestFiled(error.message));\n    }\n};\n\nexport const getComments = () => (state) => state.comments.entities;\nexport const getCommentsLoadingStatus = () => (state) =>\n    state.comments.isLoading;\n\nexport default commentsReducer;\n"]},"metadata":{},"sourceType":"module"}