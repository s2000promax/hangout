{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport qualityService from \"../services/qaulity.service\";\nimport isOutdated from \"../utils/isOutdated\";\nconst qualitiesSlice = createSlice({\n  name: \"qualities\",\n  initialState: {\n    entities: null,\n    isLoading: true,\n    error: null,\n    lastFetch: null\n  },\n  reducers: {\n    qualitiesRequested: state => {\n      state.isLoading = true;\n    },\n    qualitiesReceved: (state, action) => {\n      state.entities = action.payload;\n      state.lastFetch = Date.now();\n      state.isLoading = false;\n    },\n    qualitiesRequestFiled: (state, action) => {\n      state.error = action.payload;\n      state.isLoading = false;\n    }\n  }\n});\nconst {\n  reducer: qualitiesReducer,\n  actions\n} = qualitiesSlice;\nconst {\n  qualitiesRequested,\n  qualitiesReceved,\n  qualitiesRequestFiled\n} = actions;\nexport const loadQualitiesList = () => async (dispatch, getState) => {\n  const {\n    lastFetch\n  } = getState().qualities;\n\n  if (isOutdated(lastFetch)) {\n    dispatch(qualitiesRequested());\n\n    try {\n      const {\n        content\n      } = await qualityService.fetchAll();\n      dispatch(qualitiesReceved(content));\n    } catch (error) {\n      dispatch(qualitiesRequestFiled(error.message));\n    }\n  }\n};\nexport const getQualities = () => state => state.qualities.entities;\nexport const getQualitiesLoadingStatus = () => state => state.qualities.isLoading;\nexport const getQulitiesByIds = qualitiesIds => state => {\n  if (state.qualities.entities) {\n    const qualitiesArray = [];\n\n    for (const qualId of qualitiesIds) {\n      for (const quality of state.qualities.entities) {\n        if (quality._id === qualId) {\n          qualitiesArray.push(quality);\n          break;\n        }\n      }\n    }\n\n    return qualitiesArray;\n  }\n\n  return [];\n};\nexport default qualitiesReducer;","map":{"version":3,"sources":["/home/designer/GitHub/hangout/client/src/app/store/qualities.js"],"names":["createSlice","qualityService","isOutdated","qualitiesSlice","name","initialState","entities","isLoading","error","lastFetch","reducers","qualitiesRequested","state","qualitiesReceved","action","payload","Date","now","qualitiesRequestFiled","reducer","qualitiesReducer","actions","loadQualitiesList","dispatch","getState","qualities","content","fetchAll","message","getQualities","getQualitiesLoadingStatus","getQulitiesByIds","qualitiesIds","qualitiesArray","qualId","quality","_id","push"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AACA,OAAOC,cAAP,MAA2B,6BAA3B;AACA,OAAOC,UAAP,MAAuB,qBAAvB;AAEA,MAAMC,cAAc,GAAGH,WAAW,CAAC;AAC/BI,EAAAA,IAAI,EAAE,WADyB;AAE/BC,EAAAA,YAAY,EAAE;AACVC,IAAAA,QAAQ,EAAE,IADA;AAEVC,IAAAA,SAAS,EAAE,IAFD;AAGVC,IAAAA,KAAK,EAAE,IAHG;AAIVC,IAAAA,SAAS,EAAE;AAJD,GAFiB;AAQ/BC,EAAAA,QAAQ,EAAE;AACNC,IAAAA,kBAAkB,EAAGC,KAAD,IAAW;AAC3BA,MAAAA,KAAK,CAACL,SAAN,GAAkB,IAAlB;AACH,KAHK;AAINM,IAAAA,gBAAgB,EAAE,CAACD,KAAD,EAAQE,MAAR,KAAmB;AACjCF,MAAAA,KAAK,CAACN,QAAN,GAAiBQ,MAAM,CAACC,OAAxB;AACAH,MAAAA,KAAK,CAACH,SAAN,GAAkBO,IAAI,CAACC,GAAL,EAAlB;AACAL,MAAAA,KAAK,CAACL,SAAN,GAAkB,KAAlB;AACH,KARK;AASNW,IAAAA,qBAAqB,EAAE,CAACN,KAAD,EAAQE,MAAR,KAAmB;AACtCF,MAAAA,KAAK,CAACJ,KAAN,GAAcM,MAAM,CAACC,OAArB;AACAH,MAAAA,KAAK,CAACL,SAAN,GAAkB,KAAlB;AACH;AAZK;AARqB,CAAD,CAAlC;AAwBA,MAAM;AAAEY,EAAAA,OAAO,EAAEC,gBAAX;AAA6BC,EAAAA;AAA7B,IAAyClB,cAA/C;AACA,MAAM;AAAEQ,EAAAA,kBAAF;AAAsBE,EAAAA,gBAAtB;AAAwCK,EAAAA;AAAxC,IAAkEG,OAAxE;AAEA,OAAO,MAAMC,iBAAiB,GAAG,MAAM,OAAOC,QAAP,EAAiBC,QAAjB,KAA8B;AACjE,QAAM;AAAEf,IAAAA;AAAF,MAAgBe,QAAQ,GAAGC,SAAjC;;AACA,MAAIvB,UAAU,CAACO,SAAD,CAAd,EAA2B;AACvBc,IAAAA,QAAQ,CAACZ,kBAAkB,EAAnB,CAAR;;AACA,QAAI;AACA,YAAM;AAAEe,QAAAA;AAAF,UAAc,MAAMzB,cAAc,CAAC0B,QAAf,EAA1B;AACAJ,MAAAA,QAAQ,CAACV,gBAAgB,CAACa,OAAD,CAAjB,CAAR;AACH,KAHD,CAGE,OAAOlB,KAAP,EAAc;AACZe,MAAAA,QAAQ,CAACL,qBAAqB,CAACV,KAAK,CAACoB,OAAP,CAAtB,CAAR;AACH;AACJ;AACJ,CAXM;AAaP,OAAO,MAAMC,YAAY,GAAG,MAAOjB,KAAD,IAAWA,KAAK,CAACa,SAAN,CAAgBnB,QAAtD;AACP,OAAO,MAAMwB,yBAAyB,GAAG,MAAOlB,KAAD,IAC3CA,KAAK,CAACa,SAAN,CAAgBlB,SADb;AAEP,OAAO,MAAMwB,gBAAgB,GAAIC,YAAD,IAAmBpB,KAAD,IAAW;AACzD,MAAIA,KAAK,CAACa,SAAN,CAAgBnB,QAApB,EAA8B;AAC1B,UAAM2B,cAAc,GAAG,EAAvB;;AACA,SAAK,MAAMC,MAAX,IAAqBF,YAArB,EAAmC;AAC/B,WAAK,MAAMG,OAAX,IAAsBvB,KAAK,CAACa,SAAN,CAAgBnB,QAAtC,EAAgD;AAC5C,YAAI6B,OAAO,CAACC,GAAR,KAAgBF,MAApB,EAA4B;AACxBD,UAAAA,cAAc,CAACI,IAAf,CAAoBF,OAApB;AACA;AACH;AACJ;AACJ;;AACD,WAAOF,cAAP;AACH;;AACD,SAAO,EAAP;AACH,CAdM;AAgBP,eAAeb,gBAAf","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\nimport qualityService from \"../services/qaulity.service\";\nimport isOutdated from \"../utils/isOutdated\";\n\nconst qualitiesSlice = createSlice({\n    name: \"qualities\",\n    initialState: {\n        entities: null,\n        isLoading: true,\n        error: null,\n        lastFetch: null\n    },\n    reducers: {\n        qualitiesRequested: (state) => {\n            state.isLoading = true;\n        },\n        qualitiesReceved: (state, action) => {\n            state.entities = action.payload;\n            state.lastFetch = Date.now();\n            state.isLoading = false;\n        },\n        qualitiesRequestFiled: (state, action) => {\n            state.error = action.payload;\n            state.isLoading = false;\n        }\n    }\n});\n\nconst { reducer: qualitiesReducer, actions } = qualitiesSlice;\nconst { qualitiesRequested, qualitiesReceved, qualitiesRequestFiled } = actions;\n\nexport const loadQualitiesList = () => async (dispatch, getState) => {\n    const { lastFetch } = getState().qualities;\n    if (isOutdated(lastFetch)) {\n        dispatch(qualitiesRequested());\n        try {\n            const { content } = await qualityService.fetchAll();\n            dispatch(qualitiesReceved(content));\n        } catch (error) {\n            dispatch(qualitiesRequestFiled(error.message));\n        }\n    }\n};\n\nexport const getQualities = () => (state) => state.qualities.entities;\nexport const getQualitiesLoadingStatus = () => (state) =>\n    state.qualities.isLoading;\nexport const getQulitiesByIds = (qualitiesIds) => (state) => {\n    if (state.qualities.entities) {\n        const qualitiesArray = [];\n        for (const qualId of qualitiesIds) {\n            for (const quality of state.qualities.entities) {\n                if (quality._id === qualId) {\n                    qualitiesArray.push(quality);\n                    break;\n                }\n            }\n        }\n        return qualitiesArray;\n    }\n    return [];\n};\n\nexport default qualitiesReducer;\n"]},"metadata":{},"sourceType":"module"}