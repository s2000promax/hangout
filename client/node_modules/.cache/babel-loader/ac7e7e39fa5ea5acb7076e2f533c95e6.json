{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport professionService from \"../services/profession.service\";\nimport isOutdated from \"../utils/isOutdated\";\nconst professionsSlice = createSlice({\n  name: \"professions\",\n  initialState: {\n    entities: null,\n    isLoading: true,\n    error: null,\n    lastFetch: null\n  },\n  reducers: {\n    professionsRequested: state => {\n      state.isLoading = true;\n    },\n    professionsReceved: (state, action) => {\n      state.entities = action.payload;\n      state.lastFetch = Date.now();\n      state.isLoading = false;\n    },\n    professionsRequestFiled: (state, action) => {\n      state.error = action.payload;\n      state.isLoading = false;\n    }\n  }\n});\nconst {\n  reducer: professionsReducer,\n  actions\n} = professionsSlice;\nconst {\n  professionsRequested,\n  professionsReceved,\n  professionsRequestFiled\n} = actions;\nexport const loadProfessionsList = () => async (dispatch, getState) => {\n  const {\n    lastFetch\n  } = getState().professions;\n\n  if (isOutdated(lastFetch)) {\n    console.log(\"lastFetch\", lastFetch);\n    dispatch(professionsRequested());\n\n    try {\n      const {\n        content\n      } = await professionService.get();\n      dispatch(professionsReceved(content));\n    } catch (error) {\n      dispatch(professionsRequestFiled(error.message));\n    }\n  }\n};\nexport const getProfessions = () => state => state.professions.entities;\nexport const getProfessionsLoadingStatus = () => state => state.professions.isLoading;\nexport const getProfessionbyId = id => state => {\n  if (state.professions.entities) {\n    return state.professions.entities.find(p => p._id === id);\n  }\n};\nexport default professionsReducer;","map":{"version":3,"sources":["/home/designer/GitHub/hangout/client/src/app/store/professions.js"],"names":["createSlice","professionService","isOutdated","professionsSlice","name","initialState","entities","isLoading","error","lastFetch","reducers","professionsRequested","state","professionsReceved","action","payload","Date","now","professionsRequestFiled","reducer","professionsReducer","actions","loadProfessionsList","dispatch","getState","professions","console","log","content","get","message","getProfessions","getProfessionsLoadingStatus","getProfessionbyId","id","find","p","_id"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AACA,OAAOC,iBAAP,MAA8B,gCAA9B;AACA,OAAOC,UAAP,MAAuB,qBAAvB;AAEA,MAAMC,gBAAgB,GAAGH,WAAW,CAAC;AACjCI,EAAAA,IAAI,EAAE,aAD2B;AAEjCC,EAAAA,YAAY,EAAE;AACVC,IAAAA,QAAQ,EAAE,IADA;AAEVC,IAAAA,SAAS,EAAE,IAFD;AAGVC,IAAAA,KAAK,EAAE,IAHG;AAIVC,IAAAA,SAAS,EAAE;AAJD,GAFmB;AAQjCC,EAAAA,QAAQ,EAAE;AACNC,IAAAA,oBAAoB,EAAGC,KAAD,IAAW;AAC7BA,MAAAA,KAAK,CAACL,SAAN,GAAkB,IAAlB;AACH,KAHK;AAINM,IAAAA,kBAAkB,EAAE,CAACD,KAAD,EAAQE,MAAR,KAAmB;AACnCF,MAAAA,KAAK,CAACN,QAAN,GAAiBQ,MAAM,CAACC,OAAxB;AACAH,MAAAA,KAAK,CAACH,SAAN,GAAkBO,IAAI,CAACC,GAAL,EAAlB;AACAL,MAAAA,KAAK,CAACL,SAAN,GAAkB,KAAlB;AACH,KARK;AASNW,IAAAA,uBAAuB,EAAE,CAACN,KAAD,EAAQE,MAAR,KAAmB;AACxCF,MAAAA,KAAK,CAACJ,KAAN,GAAcM,MAAM,CAACC,OAArB;AACAH,MAAAA,KAAK,CAACL,SAAN,GAAkB,KAAlB;AACH;AAZK;AARuB,CAAD,CAApC;AAwBA,MAAM;AAAEY,EAAAA,OAAO,EAAEC,kBAAX;AAA+BC,EAAAA;AAA/B,IAA2ClB,gBAAjD;AACA,MAAM;AAAEQ,EAAAA,oBAAF;AAAwBE,EAAAA,kBAAxB;AAA4CK,EAAAA;AAA5C,IACFG,OADJ;AAGA,OAAO,MAAMC,mBAAmB,GAAG,MAAM,OAAOC,QAAP,EAAiBC,QAAjB,KAA8B;AACnE,QAAM;AAAEf,IAAAA;AAAF,MAAgBe,QAAQ,GAAGC,WAAjC;;AACA,MAAIvB,UAAU,CAACO,SAAD,CAAd,EAA2B;AACvBiB,IAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBlB,SAAzB;AACAc,IAAAA,QAAQ,CAACZ,oBAAoB,EAArB,CAAR;;AACA,QAAI;AACA,YAAM;AAAEiB,QAAAA;AAAF,UAAc,MAAM3B,iBAAiB,CAAC4B,GAAlB,EAA1B;AACAN,MAAAA,QAAQ,CAACV,kBAAkB,CAACe,OAAD,CAAnB,CAAR;AACH,KAHD,CAGE,OAAOpB,KAAP,EAAc;AACZe,MAAAA,QAAQ,CAACL,uBAAuB,CAACV,KAAK,CAACsB,OAAP,CAAxB,CAAR;AACH;AACJ;AACJ,CAZM;AAaP,OAAO,MAAMC,cAAc,GAAG,MAAOnB,KAAD,IAAWA,KAAK,CAACa,WAAN,CAAkBnB,QAA1D;AACP,OAAO,MAAM0B,2BAA2B,GAAG,MAAOpB,KAAD,IAC7CA,KAAK,CAACa,WAAN,CAAkBlB,SADf;AAEP,OAAO,MAAM0B,iBAAiB,GAAIC,EAAD,IAAStB,KAAD,IAAW;AAChD,MAAIA,KAAK,CAACa,WAAN,CAAkBnB,QAAtB,EAAgC;AAC5B,WAAOM,KAAK,CAACa,WAAN,CAAkBnB,QAAlB,CAA2B6B,IAA3B,CAAiCC,CAAD,IAAOA,CAAC,CAACC,GAAF,KAAUH,EAAjD,CAAP;AACH;AACJ,CAJM;AAKP,eAAed,kBAAf","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\nimport professionService from \"../services/profession.service\";\nimport isOutdated from \"../utils/isOutdated\";\n\nconst professionsSlice = createSlice({\n    name: \"professions\",\n    initialState: {\n        entities: null,\n        isLoading: true,\n        error: null,\n        lastFetch: null\n    },\n    reducers: {\n        professionsRequested: (state) => {\n            state.isLoading = true;\n        },\n        professionsReceved: (state, action) => {\n            state.entities = action.payload;\n            state.lastFetch = Date.now();\n            state.isLoading = false;\n        },\n        professionsRequestFiled: (state, action) => {\n            state.error = action.payload;\n            state.isLoading = false;\n        }\n    }\n});\n\nconst { reducer: professionsReducer, actions } = professionsSlice;\nconst { professionsRequested, professionsReceved, professionsRequestFiled } =\n    actions;\n\nexport const loadProfessionsList = () => async (dispatch, getState) => {\n    const { lastFetch } = getState().professions;\n    if (isOutdated(lastFetch)) {\n        console.log(\"lastFetch\", lastFetch);\n        dispatch(professionsRequested());\n        try {\n            const { content } = await professionService.get();\n            dispatch(professionsReceved(content));\n        } catch (error) {\n            dispatch(professionsRequestFiled(error.message));\n        }\n    }\n};\nexport const getProfessions = () => (state) => state.professions.entities;\nexport const getProfessionsLoadingStatus = () => (state) =>\n    state.professions.isLoading;\nexport const getProfessionbyId = (id) => (state) => {\n    if (state.professions.entities) {\n        return state.professions.entities.find((p) => p._id === id);\n    }\n};\nexport default professionsReducer;\n"]},"metadata":{},"sourceType":"module"}