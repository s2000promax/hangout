{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport professions from \"../mockData/professions.json\";\nimport qualities from \"../mockData/qualities.json\";\nimport users from \"../mockData/users.json\";\nimport httpService from \"../services/http.service\";\n\nconst useMockData = () => {\n  _s();\n\n  const statusConsts = {\n    idle: \"Not Started\",\n    pending: \"In Process\",\n    successed: \"Ready\",\n    error: \"Error occured\"\n  };\n  const [error, setError] = useState(null);\n  const [status, setStatus] = useState(statusConsts.idle);\n  const [progress, setProgress] = useState(0);\n  const [count, setCount] = useState(0);\n  const summuryCount = professions.length + qualities.length + users.length;\n\n  const incrementCount = () => {\n    setCount(prevState => prevState + 1);\n  };\n\n  const updateProgress = () => {\n    if (count !== 0 && status === statusConsts.idle) {\n      setStatus(statusConsts.pending);\n    }\n\n    const newProgress = Math.floor(count / summuryCount * 100);\n\n    if (progress < newProgress) {\n      setProgress(() => newProgress);\n    }\n\n    if (newProgress === 100) {\n      setStatus(statusConsts.successed);\n    }\n  };\n\n  useEffect(() => {\n    updateProgress();\n  }, [count]);\n\n  async function initialize() {\n    try {\n      for (const prof of professions) {\n        await httpService.put(\"profession/\" + prof._id, prof);\n        incrementCount();\n      }\n\n      for (const user of users) {\n        await httpService.put(\"user/\" + user._id, user);\n        incrementCount();\n      }\n\n      for (const qual of qualities) {\n        await httpService.put(\"quality/\" + qual._id, qual);\n        incrementCount();\n      }\n    } catch (error) {\n      setError(error);\n      setStatus(statusConsts.error);\n    }\n  }\n\n  return {\n    error,\n    initialize,\n    progress,\n    status\n  };\n};\n\n_s(useMockData, \"amu5tmYtTHr7RvcKvCBY0uEpGV0=\");\n\nexport default useMockData;","map":{"version":3,"sources":["/home/designer/GitHub/hangout/client/src/app/utils/mockData.js"],"names":["useEffect","useState","professions","qualities","users","httpService","useMockData","statusConsts","idle","pending","successed","error","setError","status","setStatus","progress","setProgress","count","setCount","summuryCount","length","incrementCount","prevState","updateProgress","newProgress","Math","floor","initialize","prof","put","_id","user","qual"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,OAAOC,WAAP,MAAwB,8BAAxB;AACA,OAAOC,SAAP,MAAsB,4BAAtB;AACA,OAAOC,KAAP,MAAkB,wBAAlB;AACA,OAAOC,WAAP,MAAwB,0BAAxB;;AAEA,MAAMC,WAAW,GAAG,MAAM;AAAA;;AACtB,QAAMC,YAAY,GAAG;AACjBC,IAAAA,IAAI,EAAE,aADW;AAEjBC,IAAAA,OAAO,EAAE,YAFQ;AAGjBC,IAAAA,SAAS,EAAE,OAHM;AAIjBC,IAAAA,KAAK,EAAE;AAJU,GAArB;AAMA,QAAM,CAACA,KAAD,EAAQC,QAAR,IAAoBX,QAAQ,CAAC,IAAD,CAAlC;AACA,QAAM,CAACY,MAAD,EAASC,SAAT,IAAsBb,QAAQ,CAACM,YAAY,CAACC,IAAd,CAApC;AACA,QAAM,CAACO,QAAD,EAAWC,WAAX,IAA0Bf,QAAQ,CAAC,CAAD,CAAxC;AACA,QAAM,CAACgB,KAAD,EAAQC,QAAR,IAAoBjB,QAAQ,CAAC,CAAD,CAAlC;AACA,QAAMkB,YAAY,GAAGjB,WAAW,CAACkB,MAAZ,GAAqBjB,SAAS,CAACiB,MAA/B,GAAwChB,KAAK,CAACgB,MAAnE;;AACA,QAAMC,cAAc,GAAG,MAAM;AACzBH,IAAAA,QAAQ,CAAEI,SAAD,IAAeA,SAAS,GAAG,CAA5B,CAAR;AACH,GAFD;;AAGA,QAAMC,cAAc,GAAG,MAAM;AACzB,QAAIN,KAAK,KAAK,CAAV,IAAeJ,MAAM,KAAKN,YAAY,CAACC,IAA3C,EAAiD;AAC7CM,MAAAA,SAAS,CAACP,YAAY,CAACE,OAAd,CAAT;AACH;;AACD,UAAMe,WAAW,GAAGC,IAAI,CAACC,KAAL,CAAYT,KAAK,GAAGE,YAAT,GAAyB,GAApC,CAApB;;AACA,QAAIJ,QAAQ,GAAGS,WAAf,EAA4B;AACxBR,MAAAA,WAAW,CAAC,MAAMQ,WAAP,CAAX;AACH;;AACD,QAAIA,WAAW,KAAK,GAApB,EAAyB;AACrBV,MAAAA,SAAS,CAACP,YAAY,CAACG,SAAd,CAAT;AACH;AACJ,GAXD;;AAaAV,EAAAA,SAAS,CAAC,MAAM;AACZuB,IAAAA,cAAc;AACjB,GAFQ,EAEN,CAACN,KAAD,CAFM,CAAT;;AAGA,iBAAeU,UAAf,GAA4B;AACxB,QAAI;AACA,WAAK,MAAMC,IAAX,IAAmB1B,WAAnB,EAAgC;AAC5B,cAAMG,WAAW,CAACwB,GAAZ,CAAgB,gBAAgBD,IAAI,CAACE,GAArC,EAA0CF,IAA1C,CAAN;AACAP,QAAAA,cAAc;AACjB;;AACD,WAAK,MAAMU,IAAX,IAAmB3B,KAAnB,EAA0B;AACtB,cAAMC,WAAW,CAACwB,GAAZ,CAAgB,UAAUE,IAAI,CAACD,GAA/B,EAAoCC,IAApC,CAAN;AACAV,QAAAA,cAAc;AACjB;;AACD,WAAK,MAAMW,IAAX,IAAmB7B,SAAnB,EAA8B;AAC1B,cAAME,WAAW,CAACwB,GAAZ,CAAgB,aAAaG,IAAI,CAACF,GAAlC,EAAuCE,IAAvC,CAAN;AACAX,QAAAA,cAAc;AACjB;AACJ,KAbD,CAaE,OAAOV,KAAP,EAAc;AACZC,MAAAA,QAAQ,CAACD,KAAD,CAAR;AACAG,MAAAA,SAAS,CAACP,YAAY,CAACI,KAAd,CAAT;AACH;AACJ;;AAED,SAAO;AAAEA,IAAAA,KAAF;AAASgB,IAAAA,UAAT;AAAqBZ,IAAAA,QAArB;AAA+BF,IAAAA;AAA/B,GAAP;AACH,CApDD;;GAAMP,W;;AAsDN,eAAeA,WAAf","sourcesContent":["import { useEffect, useState } from \"react\";\nimport professions from \"../mockData/professions.json\";\nimport qualities from \"../mockData/qualities.json\";\nimport users from \"../mockData/users.json\";\nimport httpService from \"../services/http.service\";\n\nconst useMockData = () => {\n    const statusConsts = {\n        idle: \"Not Started\",\n        pending: \"In Process\",\n        successed: \"Ready\",\n        error: \"Error occured\"\n    };\n    const [error, setError] = useState(null);\n    const [status, setStatus] = useState(statusConsts.idle);\n    const [progress, setProgress] = useState(0);\n    const [count, setCount] = useState(0);\n    const summuryCount = professions.length + qualities.length + users.length;\n    const incrementCount = () => {\n        setCount((prevState) => prevState + 1);\n    };\n    const updateProgress = () => {\n        if (count !== 0 && status === statusConsts.idle) {\n            setStatus(statusConsts.pending);\n        }\n        const newProgress = Math.floor((count / summuryCount) * 100);\n        if (progress < newProgress) {\n            setProgress(() => newProgress);\n        }\n        if (newProgress === 100) {\n            setStatus(statusConsts.successed);\n        }\n    };\n\n    useEffect(() => {\n        updateProgress();\n    }, [count]);\n    async function initialize() {\n        try {\n            for (const prof of professions) {\n                await httpService.put(\"profession/\" + prof._id, prof);\n                incrementCount();\n            }\n            for (const user of users) {\n                await httpService.put(\"user/\" + user._id, user);\n                incrementCount();\n            }\n            for (const qual of qualities) {\n                await httpService.put(\"quality/\" + qual._id, qual);\n                incrementCount();\n            }\n        } catch (error) {\n            setError(error);\n            setStatus(statusConsts.error);\n        }\n    }\n\n    return { error, initialize, progress, status };\n};\n\nexport default useMockData;\n"]},"metadata":{},"sourceType":"module"}